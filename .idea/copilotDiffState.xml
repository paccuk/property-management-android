<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/core/database/src/main/java/org/stkachenko/propertymanagement/core/database/dao/rental/RentalInviteDao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/core/database/src/main/java/org/stkachenko/propertymanagement/core/database/dao/rental/RentalInviteDao.kt" />
              <option name="originalContent" value="package org.stkachenko.propertymanagement.core.database.dao.rental&#10;&#10;import androidx.room.Dao&#10;import androidx.room.Insert&#10;import androidx.room.OnConflictStrategy&#10;import androidx.room.Query&#10;import androidx.room.Upsert&#10;import kotlinx.coroutines.flow.Flow&#10;import org.stkachenko.propertymanagement.core.database.model.rental.RentalInviteEntity&#10;&#10;@Dao&#10;interface RentalInviteDao {&#10;&#10;    @Query(&#10;        value = &quot;&quot;&quot;&#10;            SELECT * FROM rental_invites&#10;            WHERE id = :inviteId&#10;        &quot;&quot;&quot;,&#10;    )&#10;    fun getRentalInviteEntity(inviteId: String): Flow&lt;RentalInviteEntity&gt;&#10;&#10;    @Insert(onConflict = OnConflictStrategy.Companion.IGNORE)&#10;    suspend fun insertOrIgnoreRentalInvites(entities: List&lt;RentalInviteEntity&gt;): List&lt;Long&gt;&#10;&#10;    @Upsert&#10;    suspend fun upsertRentalInvites(entities: List&lt;RentalInviteEntity&gt;)&#10;&#10;    @Query(&#10;        value = &quot;&quot;&quot;&#10;            DELETE FROM rental_invites&#10;            WHERE id IN (:ids)&#10;        &quot;&quot;&quot;,&#10;    )&#10;    suspend fun deleteRentalInvites(ids: List&lt;String&gt;)&#10;&#10;    @Query(&quot;SELECT * FROM rental_invites WHERE updatedAt &gt; :timestamp&quot;)&#10;    suspend fun getRentalInvitesUpdatedAfter(timestamp: Long): List&lt;RentalInviteEntity&gt;&#10;}" />
              <option name="updatedContent" value="package org.stkachenko.propertymanagement.core.database.dao.rental&#13;&#10;&#13;&#10;import androidx.room.Dao&#13;&#10;import androidx.room.Insert&#13;&#10;import androidx.room.OnConflictStrategy&#13;&#10;import androidx.room.Query&#13;&#10;import androidx.room.Upsert&#13;&#10;import kotlinx.coroutines.flow.Flow&#13;&#10;import org.stkachenko.propertymanagement.core.database.model.rental.RentalInviteEntity&#13;&#10;&#13;&#10;@Dao&#13;&#10;interface RentalInviteDao {&#13;&#10;&#13;&#10;    @Query(&#13;&#10;        value = &quot;&quot;&quot;&#13;&#10;            SELECT * FROM rental_invites&#13;&#10;            WHERE id = :inviteId&#13;&#10;        &quot;&quot;&quot;,&#13;&#10;    )&#13;&#10;    fun getRentalInviteEntity(inviteId: String): Flow&lt;RentalInviteEntity&gt;&#13;&#10;&#13;&#10;    @Insert(onConflict = OnConflictStrategy.Companion.IGNORE)&#13;&#10;    suspend fun insertOrIgnoreRentalInvites(entities: List&lt;RentalInviteEntity&gt;): List&lt;Long&gt;&#13;&#10;&#13;&#10;    @Upsert&#13;&#10;    suspend fun upsertRentalInvites(entities: List&lt;RentalInviteEntity&gt;)&#13;&#10;&#13;&#10;    @Query(&#13;&#10;        value = &quot;&quot;&quot;&#13;&#10;            DELETE FROM rental_invites&#13;&#10;            WHERE id IN (:ids)&#13;&#10;        &quot;&quot;&quot;,&#13;&#10;    )&#13;&#10;    suspend fun deleteRentalInvites(ids: List&lt;String&gt;)&#13;&#10;&#13;&#10;    @Query(&quot;SELECT * FROM rental_invites WHERE updatedAt &gt; :timestamp&quot;)&#13;&#10;    suspend fun getRentalInvitesUpdatedAfter(timestamp: Long): List&lt;RentalInviteEntity&gt;&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/core/database/src/main/java/org/stkachenko/propertymanagement/core/database/dao/rental/RentalOfferDao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/core/database/src/main/java/org/stkachenko/propertymanagement/core/database/dao/rental/RentalOfferDao.kt" />
              <option name="originalContent" value="package org.stkachenko.propertymanagement.core.database.dao.rental&#10;&#10;import androidx.room.Dao&#10;import androidx.room.Insert&#10;import androidx.room.OnConflictStrategy&#10;import androidx.room.Query&#10;import androidx.room.Upsert&#10;import kotlinx.coroutines.flow.Flow&#10;import org.stkachenko.propertymanagement.core.database.model.rental.RentalOfferEntity&#10;&#10;@Dao&#10;interface RentalOfferDao {&#10;&#10;    @Query(&#10;        value = &quot;&quot;&quot;&#10;            SELECT * FROM rental_offers&#10;            WHERE ownerId = :ownerId&#10;        &quot;&quot;&quot;,&#10;    )&#10;    fun getRentalOfferEntitiesByOwnerId(ownerId: String): Flow&lt;List&lt;RentalOfferEntity&gt;&gt;&#10;&#10;    @Query(&#10;        value = &quot;&quot;&quot;&#10;            SELECT * FROM rental_offers&#10;            WHERE propertyId = :propertyId&#10;        &quot;&quot;&quot;,&#10;    )&#10;    fun getRentalOfferEntitiesByPropertyId(propertyId: String): Flow&lt;List&lt;RentalOfferEntity&gt;&gt;&#10;&#10;    @Insert(onConflict = OnConflictStrategy.Companion.IGNORE)&#10;    suspend fun insertOrIgnoreRentalOffers(entities: List&lt;RentalOfferEntity&gt;): List&lt;Long&gt;&#10;&#10;    @Upsert&#10;    suspend fun upsertRentalOffers(entities: List&lt;RentalOfferEntity&gt;)&#10;&#10;    @Query(&#10;        value = &quot;&quot;&quot;&#10;            DELETE FROM rental_offers&#10;            WHERE id IN (:ids)&#10;        &quot;&quot;&quot;,&#10;    )&#10;    suspend fun deleteRentalOffers(ids: List&lt;String&gt;)&#10;&#10;    @Query(&quot;SELECT * FROM rental_offers WHERE updatedAt &gt; :timestamp&quot;)&#10;    suspend fun getRentalOffersUpdatedAfter(timestamp: Long): List&lt;RentalOfferEntity&gt;&#10;}" />
              <option name="updatedContent" value="package org.stkachenko.propertymanagement.core.database.dao.rental&#13;&#10;&#13;&#10;import androidx.room.Dao&#13;&#10;import androidx.room.Insert&#13;&#10;import androidx.room.OnConflictStrategy&#13;&#10;import androidx.room.Query&#13;&#10;import androidx.room.Upsert&#13;&#10;import kotlinx.coroutines.flow.Flow&#13;&#10;import org.stkachenko.propertymanagement.core.database.model.rental.RentalOfferEntity&#13;&#10;&#13;&#10;@Dao&#13;&#10;interface RentalOfferDao {&#13;&#10;&#13;&#10;    @Query(&#13;&#10;        value = &quot;&quot;&quot;&#13;&#10;            SELECT * FROM rental_offers&#13;&#10;            WHERE ownerId = :ownerId&#13;&#10;        &quot;&quot;&quot;,&#13;&#10;    )&#13;&#10;    fun getRentalOfferEntitiesByOwnerId(ownerId: String): Flow&lt;List&lt;RentalOfferEntity&gt;&gt;&#13;&#10;&#13;&#10;    @Query(&#13;&#10;        value = &quot;&quot;&quot;&#13;&#10;            SELECT * FROM rental_offers&#13;&#10;            WHERE propertyId = :propertyId&#13;&#10;        &quot;&quot;&quot;,&#13;&#10;    )&#13;&#10;    fun getRentalOfferEntitiesByPropertyId(propertyId: String): Flow&lt;List&lt;RentalOfferEntity&gt;&gt;&#13;&#10;&#13;&#10;    @Insert(onConflict = OnConflictStrategy.Companion.IGNORE)&#13;&#10;    suspend fun insertOrIgnoreRentalOffers(entities: List&lt;RentalOfferEntity&gt;): List&lt;Long&gt;&#13;&#10;&#13;&#10;    @Upsert&#13;&#10;    suspend fun upsertRentalOffers(entities: List&lt;RentalOfferEntity&gt;)&#13;&#10;&#13;&#10;    @Query(&#13;&#10;        value = &quot;&quot;&quot;&#13;&#10;            DELETE FROM rental_offers&#13;&#10;            WHERE id IN (:ids)&#13;&#10;        &quot;&quot;&quot;,&#13;&#10;    )&#13;&#10;    suspend fun deleteRentalOffers(ids: List&lt;String&gt;)&#13;&#10;&#13;&#10;    @Query(&quot;SELECT * FROM rental_offers WHERE updatedAt &gt; :timestamp&quot;)&#13;&#10;    suspend fun getRentalOffersUpdatedAfter(timestamp: Long): List&lt;RentalOfferEntity&gt;&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/core/datastore-proto/src/main/proto/org/stkachenko/propertymanagement/data/user_preferences.proto">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/core/datastore-proto/src/main/proto/org/stkachenko/propertymanagement/data/user_preferences.proto" />
              <option name="originalContent" value="syntax = &quot;proto3&quot;;&#10;&#10;import &quot;org/stkachenko/propertymanagement/data/dark_theme_config.proto&quot;;&#10;&#10;option java_package = &quot;org.stkachenko.propertymanagement.core.datastore&quot;;&#10;option java_multiple_files = true;&#10;&#10;message UserPreferences {&#10;  DarkThemeConfigProto dark_theme_config = 1;&#10;  bool use_dynamic_color = 2;&#10;&#10;  string user_id = 3;&#10;  string user_role = 4;&#10;  bool is_logged_in = 5;&#10;&#10;  int64 last_property_sync_time = 10;&#10;  int64 last_user_sync_time = 11;&#10;  int64 last_rental_sync_time = 12;&#10;  int64 last_payment_sync_time = 13;&#10;  int64 last_rental_invite_sync_time = 24;&#10;  int64 last_rental_offer_sync_time = 25;&#10;  int64 last_invoice_sync_time = 26;&#10;  int64 last_payment_schedule_sync_time = 27;&#10;}&#10;" />
              <option name="updatedContent" value="syntax = &quot;proto3&quot;;&#10;&#10;import &quot;org/stkachenko/propertymanagement/data/dark_theme_config.proto&quot;;&#10;&#10;option java_package = &quot;org.stkachenko.propertymanagement.core.datastore&quot;;&#10;option java_multiple_files = true;&#10;&#10;message UserPreferences {&#10;  DarkThemeConfigProto dark_theme_config = 1;&#10;  bool use_dynamic_color = 2;&#10;&#10;  string user_id = 3;&#10;  string user_role = 4;&#10;  bool is_logged_in = 5;&#10;&#10;  int64 last_property_sync_time = 10;&#10;  int64 last_user_sync_time = 11;&#10;  int64 last_rental_sync_time = 12;&#10;  int64 last_payment_sync_time = 13;&#10;  int64 last_rental_invite_sync_time = 24;&#10;  int64 last_rental_offer_sync_time = 25;&#10;  int64 last_invoice_sync_time = 26;&#10;  int64 last_payment_schedule_sync_time = 27;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>